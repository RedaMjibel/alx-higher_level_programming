A module for 1-my_list
=======================

Using ``1-mylist``
-----------------------

import function from module:
	>>> Mylist = __import__('1-my_list').MyList

Correct Class Type test:
	>>> mylist = MyList()
	>>> type(mylist) == MyList
	True

Correct Instance test:
    >>> ml = MyList()
    >>> isinstance(ml, list)
    True

print_sorted method is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method called with 1 arg:
    >>> ml.print_sorted([4, 2, 5])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Empty list test:
    >>> ml = MyList()
    >>> ml.print_sorted()
    []

print_sorted method is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method called via class with no args:
    >>> ml.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'


Normal list test:
    >>> ml = MyList([2, 10, 1])
    >>> ml.print_sorted()
    [1, 2, 10]

print_sorted method called with 2 args:
    >>> ml.print_sorted([4, 2, 5], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given
